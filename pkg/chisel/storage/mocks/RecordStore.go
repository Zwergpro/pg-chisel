// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// RecordStore is an autogenerated mock type for the RecordStore type
type RecordStore struct {
	mock.Mock
}

// GetColumnMapping provides a mock function with no fields
func (_m *RecordStore) GetColumnMapping() map[string][]byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetColumnMapping")
	}

	var r0 map[string][]byte
	if rf, ok := ret.Get(0).(func() map[string][]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]byte)
		}
	}

	return r0
}

// Refresh provides a mock function with no fields
func (_m *RecordStore) Refresh() {
	_m.Called()
}

// SetVal provides a mock function with given fields: col, val
func (_m *RecordStore) SetVal(col string, val []byte) error {
	ret := _m.Called(col, val)

	if len(ret) == 0 {
		panic("no return value specified for SetVal")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(col, val)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRecordStore creates a new instance of RecordStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRecordStore(t interface {
	mock.TestingT
	Cleanup(func())
},
) *RecordStore {
	mock := &RecordStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
