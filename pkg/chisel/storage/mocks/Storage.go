// Code generated by mockery v2.51.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// Delete provides a mock function with given fields: key
func (_m *Storage) Delete(key string) {
	_m.Called(key)
}

// Get provides a mock function with given fields: key
func (_m *Storage) Get(key string) []string {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetSet provides a mock function with given fields: key
func (_m *Storage) GetSet(key string) map[string]struct{} {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetSet")
	}

	var r0 map[string]struct{}
	if rf, ok := ret.Get(0).(func(string) map[string]struct{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]struct{})
		}
	}

	return r0
}

// Set provides a mock function with given fields: key, values
func (_m *Storage) Set(key string, values []string) {
	_m.Called(key, values)
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
},
) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
